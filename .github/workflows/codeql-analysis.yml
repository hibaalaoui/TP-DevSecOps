name: "CodeQL JavaScript Analysis with HTML Report"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  codeql:
    name: Analyze code with CodeQL
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript-typescript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"
        output: sarif-results
        upload: false
    
    - name: Install Python dependencies
      run: |
        pip install jinja2
    
    - name: Generate HTML Report
      run: |
        python3 << 'PYTHON_SCRIPT'
        import json
        import os
        from datetime import datetime
        from pathlib import Path
        
        # Trouver le fichier SARIF
        sarif_files = list(Path('sarif-results').rglob('*.sarif'))
        if not sarif_files:
            print("‚ùå Aucun fichier SARIF trouv√©")
            exit(1)
        
        sarif_file = sarif_files[0]
        print(f"üìÑ Lecture de {sarif_file}")
        
        with open(sarif_file, 'r') as f:
            sarif_data = json.load(f)
        
        # Extraire les r√©sultats
        run = sarif_data['runs'][0]
        results = run.get('results', [])
        rules = {rule['id']: rule for rule in run['tool']['driver'].get('rules', [])}
        
        # Compter par s√©v√©rit√©
        severity_map = {
            'error': {'label': 'Critique/Haute', 'color': '#e74c3c', 'count': 0},
            'warning': {'label': 'Moyenne', 'color': '#f39c12', 'count': 0},
            'note': {'label': 'Basse/Info', 'color': '#3498db', 'count': 0}
        }
        
        for result in results:
            level = result.get('level', 'warning')
            severity_map[level]['count'] += 1
        
        # G√©n√©rer le HTML
        os.makedirs('codeql-report', exist_ok=True)
        
        html_content = f'''<!DOCTYPE html>
        <html lang="fr">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Rapport CodeQL - Juice Shop</title>
            <style>
                * {{ margin: 0; padding: 0; box-sizing: border-box; }}
                body {{
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                    background: #f5f7fa;
                    padding: 20px;
                    color: #2c3e50;
                }}
                .container {{ max-width: 1200px; margin: 0 auto; }}
                header {{
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 40px;
                    border-radius: 12px;
                    margin-bottom: 30px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                }}
                h1 {{ font-size: 2.5em; margin-bottom: 10px; }}
                .date {{ opacity: 0.9; font-size: 0.9em; }}
                .stats {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 20px;
                    margin-bottom: 30px;
                }}
                .stat-card {{
                    background: white;
                    padding: 25px;
                    border-radius: 12px;
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                    border-left: 4px solid;
                }}
                .stat-number {{ font-size: 3em; font-weight: bold; margin: 10px 0; }}
                .stat-label {{ color: #7f8c8d; font-size: 0.9em; text-transform: uppercase; }}
                .vulnerability {{
                    background: white;
                    padding: 25px;
                    margin-bottom: 20px;
                    border-radius: 12px;
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                    border-left: 6px solid;
                }}
                .vuln-header {{ display: flex; align-items: center; gap: 15px; margin-bottom: 15px; }}
                .severity-badge {{
                    padding: 8px 16px;
                    border-radius: 6px;
                    color: white;
                    font-weight: bold;
                    font-size: 0.85em;
                    text-transform: uppercase;
                }}
                .vuln-title {{ font-size: 1.3em; flex: 1; }}
                .vuln-details {{ background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0; }}
                .detail-row {{ margin: 8px 0; }}
                .detail-label {{ font-weight: bold; color: #555; }}
                code {{ background: #e8f4f8; padding: 2px 6px; border-radius: 3px; font-family: monospace; }}
                .no-vulns {{
                    background: white;
                    padding: 40px;
                    text-align: center;
                    border-radius: 12px;
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                }}
                .no-vulns h2 {{ color: #27ae60; font-size: 2em; margin-bottom: 10px; }}
            </style>
        </head>
        <body>
            <div class="container">
                <header>
                    <h1>üîç Rapport d'Analyse CodeQL</h1>
                    <div class="date">Projet: Juice Shop | G√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}</div>
                </header>
                
                <div class="stats">
                    <div class="stat-card" style="border-color: #3498db;">
                        <div class="stat-label">Total Vuln√©rabilit√©s</div>
                        <div class="stat-number">{len(results)}</div>
                    </div>
        '''
        
        for level, info in severity_map.items():
            html_content += f'''
                    <div class="stat-card" style="border-color: {info['color']};">
                        <div class="stat-label">{info['label']}</div>
                        <div class="stat-number" style="color: {info['color']};">{info['count']}</div>
                    </div>
            '''
        
        html_content += '</div>'
        
        if not results:
            html_content += '''
                <div class="no-vulns">
                    <h2>‚úÖ Aucune vuln√©rabilit√© d√©tect√©e</h2>
                    <p>Le code a pass√© l'analyse CodeQL avec succ√®s !</p>
                </div>
            '''
        else:
            html_content += '<h2 style="margin: 30px 0 20px 0; font-size: 1.8em;">üìã D√©tails des Vuln√©rabilit√©s</h2>'
            
            for idx, result in enumerate(results, 1):
                rule_id = result.get('ruleId', 'unknown')
                rule = rules.get(rule_id, {})
                level = result.get('level', 'warning')
                message = result.get('message', {}).get('text', 'Vuln√©rabilit√© d√©tect√©e')
                
                location = result.get('locations', [{}])[0].get('physicalLocation', {})
                uri = location.get('artifactLocation', {}).get('uri', 'Fichier inconnu')
                start_line = location.get('region', {}).get('startLine', '?')
                
                color = severity_map.get(level, severity_map['warning'])['color']
                
                html_content += f'''
                <div class="vulnerability" style="border-color: {color};">
                    <div class="vuln-header">
                        <span class="severity-badge" style="background: {color};">{level.upper()}</span>
                        <div class="vuln-title">{message}</div>
                    </div>
                    <div class="vuln-details">
                        <div class="detail-row"><span class="detail-label">üÜî R√®gle:</span> <code>{rule_id}</code></div>
                        <div class="detail-row"><span class="detail-label">üìÅ Fichier:</span> <code>{uri}</code></div>
                        <div class="detail-row"><span class="detail-label">üìç Ligne:</span> <code>{start_line}</code></div>
                '''
                
                if rule.get('shortDescription'):
                    html_content += f'<div class="detail-row" style="margin-top: 15px;"><strong>Description:</strong> {rule["shortDescription"].get("text", "")}</div>'
                
                html_content += '''
                    </div>
                </div>
                '''
        
        html_content += '''
            </div>
        </body>
        </html>
        '''
        
        with open('codeql-report/index.html', 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"‚úÖ Rapport HTML g√©n√©r√© : {len(results)} vuln√©rabilit√©s trouv√©es")
        PYTHON_SCRIPT
    
    - name: Upload CodeQL results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: sarif-results
    
    - name: Upload HTML Report as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: codeql-html-report
        path: codeql-report/
        retention-days: 30
      if: always()
